<uppercase_letter> ::= A | ... | Z
<lowercase_letter> ::= a | ... | z
<letter> ::= <uppercase_letter> | <lowercase_letter>
<non_0_digit> ::= 1 | ... | 9
<digit> ::= 0 | <non_0_digit>

<letter_digit_underscore> ::= <letter> | <digit> | _
<letter_digit_underscore_seq> ::= <letter_digit_underscore> | <letter_digit_underscore><letter_digit_underscore_seq>
<identifier> ::= <letter> | <letter><letter_digit_underscore_seq>

<whitespace> ::= space | tab | newline
<separator> ::= { | } | ; | <whitespace> | [ | ]

<digit_seq> ::= <digit> | <digit><digit_seq>

<number> ::= <digit> | <non_0_digit><digit_seq>
<int> ::= +<number> | -<number> | <number>

<letter_digit> ::= <letter> | <digit>
<letter_digit_seq> ::= <letter_digit> | <letter_digit><letter_digit_seq>
<string> ::= "<letter_digit_seq>"

<boolean> ::= true | false

<simple_type> ::= int | string | boolean
<tuple_type> ::= "["<type_seq>"]" | "["<type> <number>"]"
<type> ::= <simple_type> | <tuple_type>
<type_seq> ::= <type> | <type><type_seq>

<simple_literal> ::= <int> | <string> | <boolean>
<tuple_literal> ::= "["<expression_seq>"]"
<literal> ::= <simple_literal> | <tuple_literal>

<tuple_value> ::= <identifier>@<number> | <identifier>@<identifier>

<term> ::= <identifier> | <literal> | <tuple_value>
<expression> ::= <term> | <op> <expression> <expression>
<expression_seq> ::= <expression> | <expression><expression_seq> 

<op> ::= <arithmetic_op> | <logical_op>
<arithmetic_op> ::= + | - | * | / | %
<logical_op> ::= && | "||"

<io> ::= $in <identifier> | $in <tuple_value> | $out <expression> | $err <expression>

<declaration> ::= <type> <identifier>;
<declaration_seq> ::= <declaration> | <declaration><declaration_seq>
<assignment> ::= <identifier> "=" <expression>

<exit> ::= exit <number>;

<statement> ::= <assignment>; | <io>; | <if_stmt> | <while_stmt> | <exit>
<statement_seq> ::= <statement> | <statement><statement_seq>

<comparison> ::= < | > | == | != | <= | >=
<condition> ::= <comparison> <expression> <expression>

<if> ::= if <condition> { <statement_seq> }
<else> ::= else { <statement_seq> }
<elif> ::= elif <condition> { <statement_seq> }
<elif_seq> ::= <elif> | <elif><elif_seq>
<if_stmt> ::= <if> | <if><else> | <if><elif_seq> | <if><elif_seq><else>

<while_stmt> ::= while <condition> { <statement_seq> }

<reserved> ::= <type> | if | elif | else | while | exit

<program> ::= <declaration_seq><statement_seq><exit>
